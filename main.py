import logging
import json
import os
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
from flask import Flask
from threading import Thread

# ==================== –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø –ü–û–î–î–ï–†–ñ–ê–ù–ò–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò ====================

app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run_flask)
    t.start()

# ==================== –ó–ê–ì–†–£–ó–ö–ê –¢–û–ö–ï–ù–ê –ò–ó .ENV ====================

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')  # –í–∞—à chat_id –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤

if not BOT_TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
    exit(1)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

DATA_FILE = "clients_cheer4.json"
REMINDER_THRESHOLD = 1  # –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å 1 –∑–∞–Ω—è—Ç–∏–µ
REPORT_HOUR = 10        # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ (10:00)

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ====================

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==================== –†–ê–ë–û–¢–ê –° –î–ê–ù–ù–´–ú–ò ====================

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            try:
                data = json.load(f)
                return convert_to_new_format(data)
            except json.JSONDecodeError:
                return {}
    return {}

def convert_to_new_format(data):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—ã–π —Å –¥–∞—Ç–∞–º–∏."""
    new_data = {}
    for client_name, client_data in data.items():
        if isinstance(client_data, dict):
            new_data[client_name] = client_data
        else:
            new_data[client_name] = {
                'sessions': client_data,
                'last_payment_date': datetime.now().isoformat(),
                'phone': '',
                'notes': ''
            }
    return new_data

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –≤ JSON-—Ñ–∞–π–ª."""
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def add_sessions_to_client(client_name, sessions_to_add, phone="", notes=""):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–Ω—è—Ç–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É."""
    data = load_data()
    if client_name in data:
        data[client_name]['sessions'] += sessions_to_add
        data[client_name]['last_payment_date'] = datetime.now().isoformat()
        if phone:
            data[client_name]['phone'] = phone
        if notes:
            data[client_name]['notes'] = notes
    else:
        data[client_name] = {
            'sessions': sessions_to_add,
            'last_payment_date': datetime.now().isoformat(),
            'phone': phone,
            'notes': notes
        }
    save_data(data)

def mark_attendance(client_name):
    """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞–Ω—è—Ç–∏–π."""
    data = load_data()
    if client_name in data and data[client_name]['sessions'] > 0:
        data[client_name]['sessions'] -= 1
        data[client_name]['last_attendance'] = datetime.now().isoformat()
        save_data(data)
        return data[client_name]['sessions']
    else:
        return None

def get_remaining_sessions(client_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π."""
    data = load_data()
    if client_name in data:
        return data[client_name]['sessions']
    return None

def get_client_info(client_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ."""
    data = load_data()
    return data.get(client_name)

def delete_client(client_name):
    """–£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    data = load_data()
    if client_name in data:
        del data[client_name]
        save_data(data)
        return True
    return False

def ensure_data_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=4)
        print(f"‚úÖ –§–∞–π–ª {DATA_FILE} —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

# ==================== –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –ò –û–¢–ß–ï–¢–û–í ====================

async def send_reminders(application):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö —Å 1 –∑–∞–Ω—è—Ç–∏–µ–º."""
    data = load_data()
    reminders_sent = 0
    
    clients_with_one_session = []
    for client_name, client_data in data.items():
        sessions = client_data['sessions']
        if sessions == REMINDER_THRESHOLD:
            clients_with_one_session.append(client_name)
    
    if clients_with_one_session:
        message = "üîî –ö–õ–ò–ï–ù–¢–´ –° 1 –ó–ê–ù–Ø–¢–ò–ï–ú:\n\n"
        for client_name in clients_with_one_session:
            message += f"‚Ä¢ {client_name}\n"
        
        message += f"\n–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å 1 –∑–∞–Ω—è—Ç–∏–µ–º: {len(clients_with_one_session)}"
        
        if ADMIN_CHAT_ID:
            try:
                await application.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=message
                )
                reminders_sent = len(clients_with_one_session)
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {reminders_sent} –∫–ª–∏–µ–Ω—Ç–æ–≤")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    return reminders_sent

async def send_monthly_report(application):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    if not ADMIN_CHAT_ID:
        print("‚ùå ADMIN_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç—á–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return
        
    data = load_data()
    total_clients = len(data)
    total_sessions = sum(client_data['sessions'] for client_data in data.values())
    
    # –ö–ª–∏–µ–Ω—Ç—ã —Å 1 –∑–∞–Ω—è—Ç–∏–µ–º
    clients_with_one_session = []
    for client_name, client_data in data.items():
        if client_data['sessions'] == REMINDER_THRESHOLD:
            clients_with_one_session.append(client_name)
    
    # –ö–ª–∏–µ–Ω—Ç—ã —Å 0 –∑–∞–Ω—è—Ç–∏–π
    clients_with_zero_sessions = []
    for client_name, client_data in data.items():
        if client_data['sessions'] == 0:
            clients_with_zero_sessions.append(client_name)
    
    # –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    month_ago = datetime.now() - timedelta(days=30)
    new_clients = []
    for client_name, client_data in data.items():
        payment_date = datetime.fromisoformat(client_data['last_payment_date'])
        if payment_date >= month_ago:
            new_clients.append(client_name)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = "üìä –ï–ñ–ï–ú–ï–°–Ø–ß–ù–´–ô –û–¢–ß–ï–¢\n\n"
    report += f"üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}\n"
    report += f"üé´ –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö: {total_sessions}\n"
    report += f"üÜï –ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {len(new_clients)}\n\n"
    
    if clients_with_one_session:
        report += "üîî –ö–õ–ò–ï–ù–¢–´ –° 1 –ó–ê–ù–Ø–¢–ò–ï–ú:\n"
        for client_name in clients_with_one_session:
            report += f"‚Ä¢ {client_name}\n"
        report += f"\n"
    
    if clients_with_zero_sessions:
        report += "‚ùå –ö–õ–ò–ï–ù–¢–´ –° 0 –ó–ê–ù–Ø–¢–ò–ô:\n"
        for client_name in clients_with_zero_sessions:
            report += f"‚Ä¢ {client_name}\n"
        report += f"\n"
    
    if new_clients:
        report += f"üÜï –ù–û–í–´–ï –ö–õ–ò–ï–ù–¢–´:\n" + "\n".join([f"‚Ä¢ {name}" for name in new_clients])

    try:
        await application.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=report
        )
        print("‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")

def is_monthly_report_day():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–µ–≥–æ–¥–Ω—è –ª–∏ –¥–µ–Ω—å –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (30-–µ –∏–ª–∏ 28-–µ –≤ —Ñ–µ–≤—Ä–∞–ª–µ)."""
    now = datetime.now()
    day = now.day
    month = now.month
    
    # –§–µ–≤—Ä–∞–ª—å - 28-–µ
    if month == 2 and day == 28:
        return True
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã - 30-–µ
    elif day == 30:
        return True
    
    return False

async def schedule_tasks(application):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏."""
    last_report_sent = None
    
    while True:
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
        if (is_monthly_report_day() and 
            now.hour == REPORT_HOUR and 
            now.minute == 0 and
            (last_report_sent is None or last_report_sent.date() != now.date())):
            
            await send_monthly_report(application)
            await send_reminders(application)
            last_report_sent = now
            print(f"‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã {now.strftime('%d.%m.%Y %H:%M')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
        elif (now.hour == REPORT_HOUR and 
              now.minute == 0 and
              (last_report_sent is None or last_report_sent.date() != now.date())):
            
            await send_reminders(application)
            last_report_sent = now
            print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {now.strftime('%d.%m.%Y %H:%M')}")
        
        # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(60)

# ==================== –°–û–ó–î–ê–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–† ====================

def main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="list_clients")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="add_client")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
        [InlineKeyboardButton("üîî –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="test_reminders")]
    ]
    return InlineKeyboardMarkup(keyboard)

def clients_list_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    data = load_data()
    keyboard = []
    
    for client_name in sorted(data.keys()):
        sessions = data[client_name]['sessions']
        button_text = f"{client_name} ({sessions} –∑–∞–Ω—è—Ç–∏–π)"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"client_{client_name}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)

def client_actions_keyboard(client_name):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ", callback_data=f"attend_{client_name}")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏—è", callback_data=f"add_sessions_{client_name}")],
        [InlineKeyboardButton("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"info_{client_name}")],
        [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫", callback_data=f"check_{client_name}")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"delete_ask_{client_name}")],
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="list_clients")]
    ]
    return InlineKeyboardMarkup(keyboard)

def delete_confirmation_keyboard(client_name):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è."""
    keyboard = [
        [InlineKeyboardButton("‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_confirm_{client_name}")],
        [InlineKeyboardButton("‚úÖ –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data=f"client_{client_name}")]
    ]
    return InlineKeyboardMarkup(keyboard)

def back_to_main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    keyboard = [
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞!")
    await update.message.reply_text(
        "üëØ‚Äç‚ôÄÔ∏è –£—á–µ—Ç –∑–∞–Ω—è—Ç–∏–π –ß–∏—Ä–ª–∏–¥–∏–Ω–≥ (4+)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    print(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {callback_data}")
    
    if callback_data == "main_menu":
        await query.edit_message_text(
            "üëØ‚Äç‚ôÄÔ∏è –£—á–µ—Ç –∑–∞–Ω—è—Ç–∏–π –ß–∏—Ä–ª–∏–¥–∏–Ω–≥ (4+)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )
    
    elif callback_data == "list_clients":
        data = load_data()
        if not data:
            await query.edit_message_text(
                "üìù –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.",
                reply_markup=main_menu_keyboard()
            )
        else:
            await query.edit_message_text(
                "üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:",
                reply_markup=clients_list_keyboard()
            )
    
    elif callback_data == "add_client":
        context.user_data['awaiting_client_name'] = True
        await query.edit_message_text(
            "üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=back_to_main_menu_keyboard()
        )
    
    elif callback_data == "statistics":
        data = load_data()
        total_clients = len(data)
        total_sessions = sum(client_data['sessions'] for client_data in data.values())
        
        # –ö–ª–∏–µ–Ω—Ç—ã —Å 1 –∑–∞–Ω—è—Ç–∏–µ–º
        clients_with_one_session = []
        for client_name, client_data in data.items():
            if client_data['sessions'] == REMINDER_THRESHOLD:
                clients_with_one_session.append(client_name)
        
        message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        message += f"–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}\n"
        message += f"–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö: {total_sessions}\n"
        
        if clients_with_one_session:
            message += f"\nüîî –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å 1 –∑–∞–Ω—è—Ç–∏–µ–º: {len(clients_with_one_session)}\n"
            for client_name in clients_with_one_session[:5]:
                message += f"‚Ä¢ {client_name}\n"
            if len(clients_with_one_session) > 5:
                message += f"... –∏ –µ—â–µ {len(clients_with_one_session) - 5}\n"
        
        await query.edit_message_text(
            message,
            reply_markup=main_menu_keyboard()
        )
    
    elif callback_data == "test_reminders":
        sent_count = await send_reminders(context.application)
        if sent_count > 0:
            message = f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è {sent_count} –∫–ª–∏–µ–Ω—Ç–æ–≤"
        else:
            message = "‚úÖ –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å 1 –∑–∞–Ω—è—Ç–∏–µ–º –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        
        await query.edit_message_text(
            message,
            reply_markup=main_menu_keyboard()
        )
    
    elif callback_data.startswith("client_"):
        client_name = callback_data[7:]
        remaining = get_remaining_sessions(client_name)
        
        await query.edit_message_text(
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
            f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π: {remaining}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=client_actions_keyboard(client_name)
        )
    
    elif callback_data.startswith("info_"):
        client_name = callback_data[5:]
        client_info = get_client_info(client_name)
        
        if client_info:
            message = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:\n\n"
            message += f"–ò–º—è: {client_name}\n"
            message += f"–ó–∞–Ω—è—Ç–∏–π: {client_info['sessions']}\n"
            
            if client_info['last_payment_date']:
                payment_date = datetime.fromisoformat(client_info['last_payment_date'])
                message += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–ª–∞—Ç–∞: {payment_date.strftime('%d.%m.%Y')}\n"
            
            if client_info.get('last_attendance'):
                last_attendance = datetime.fromisoformat(client_info['last_attendance'])
                message += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {last_attendance.strftime('%d.%m.%Y')}\n"
            
            if client_info['phone']:
                message += f"–¢–µ–ª–µ—Ñ–æ–Ω: {client_info['phone']}\n"
            
            if client_info['notes']:
                message += f"–ó–∞–º–µ—Ç–∫–∏: {client_info['notes']}\n"
        else:
            message = f"‚ùå –ö–ª–∏–µ–Ω—Ç {client_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        await query.edit_message_text(
            message,
            reply_markup=client_actions_keyboard(client_name)
        )
    
    elif callback_data.startswith("attend_"):
        client_name = callback_data[7:]
        remaining = mark_attendance(client_name)
        
        if remaining is not None:
            message = f"‚úÖ –ü–æ—Å–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –¥–ª—è {client_name}\n"
            message += f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π: {remaining}"
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ 1 –∑–∞–Ω—è—Ç–∏–µ
            if remaining == REMINDER_THRESHOLD:
                message += f"\n\nüîî –í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å 1 –∑–∞–Ω—è—Ç–∏–µ"
        else:
            message = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ –¥–ª—è {client_name}\n"
            message += "–í–æ–∑–º–æ–∂–Ω–æ, –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        await query.edit_message_text(
            message,
            reply_markup=client_actions_keyboard(client_name)
        )
    
    elif callback_data.startswith("check_"):
        client_name = callback_data[6:]
        remaining = get_remaining_sessions(client_name)
        
        if remaining is not None:
            message = f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
            message += f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π: {remaining}"
            
            if remaining == REMINDER_THRESHOLD:
                message += f"\n\nüîî –í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å 1 –∑–∞–Ω—è—Ç–∏–µ"
        else:
            message = f"‚ùå –ö–ª–∏–µ–Ω—Ç {client_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        await query.edit_message_text(
            message,
            reply_markup=client_actions_keyboard(client_name)
        )
    
    elif callback_data.startswith("add_sessions_"):
        client_name = callback_data[13:]
        context.user_data['add_sessions_client'] = client_name
        context.user_data['awaiting_sessions_count'] = True
        await query.edit_message_text(
            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è {client_name}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"client_{client_name}")]
            ])
        )
    
    elif callback_data.startswith("delete_ask_"):
        client_name = callback_data[11:]
        await query.edit_message_text(
            f"üóëÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client_name}?\n\n"
            "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=delete_confirmation_keyboard(client_name)
        )
    
    elif callback_data.startswith("delete_confirm_"):
        client_name = callback_data[15:]
        if delete_client(client_name):
            await query.edit_message_text(
                f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                reply_markup=main_menu_keyboard()
            )
        else:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_name}",
                reply_markup=main_menu_keyboard()
            )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ====================

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    text = update.message.text.strip()
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    
    if context.user_data.get('awaiting_client_name'):
        if not text:
            await update.message.reply_text("‚ùå –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        add_sessions_to_client(text, 0)
        context.user_data.pop('awaiting_client_name', None)
        
        await update.message.reply_text(
            f"‚úÖ –ö–ª–∏–µ–Ω—Ç '{text}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –Ω–µ–≥–æ.",
            reply_markup=client_actions_keyboard(text)
        )
    
    elif context.user_data.get('awaiting_sessions_count'):
        try:
            sessions_to_add = int(text)
            if sessions_to_add <= 0:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
                return
                
            client_name = context.user_data.get('add_sessions_client')
            if client_name:
                add_sessions_to_client(client_name, sessions_to_add)
                remaining = get_remaining_sessions(client_name)
                
                context.user_data.pop('awaiting_sessions_count', None)
                context.user_data.pop('add_sessions_client', None)
                
                await update.message.reply_text(
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {sessions_to_add} –∑–∞–Ω—è—Ç–∏–π –¥–ª—è {client_name}\n"
                    f"üìä –¢–µ–ø–µ—Ä—å –∑–∞–Ω—è—Ç–∏–π: {remaining}",
                    reply_markup=client_actions_keyboard(client_name)
                )
        
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º",
            reply_markup=main_menu_keyboard()
        )

# ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

def main():
    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_text_message
    ))

    print("ü§ñ –ë–æ—Ç Cheer9 –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {DATA_FILE}")
    print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å: {REMINDER_THRESHOLD} –∑–∞–Ω—è—Ç–∏–µ–º")
    print(f"‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: 30-–≥–æ —á–∏—Å–ª–∞ (28-–≥–æ –≤ —Ñ–µ–≤—Ä–∞–ª–µ) –≤ {REPORT_HOUR}:00")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    loop = asyncio.get_event_loop()
    loop.create_task(schedule_tasks(application))
    
    application.run_polling()
    print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# ==================== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ====================

if __name__ == '__main__':
    ensure_data_file()  # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    keep_alive()        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    main()              # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞